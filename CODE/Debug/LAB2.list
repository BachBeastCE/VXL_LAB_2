
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002764  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002870  08002870  00003870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800289c  0800289c  00004034  2**0
                  CONTENTS
  4 .ARM          00000000  0800289c  0800289c  00004034  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800289c  0800289c  00004034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800289c  0800289c  0000389c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028a0  080028a0  000038a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  080028a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000034  080028d8  00004034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  080028d8  000040cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008080  00000000  00000000  0000405d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ac  00000000  00000000  0000c0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0000d990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007dd  00000000  00000000  0000e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164b0  00000000  00000000  0000eba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a607  00000000  00000000  00025055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082224  00000000  00000000  0002f65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002940  00000000  00000000  000b18c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000b4204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002858 	.word	0x08002858

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002858 	.word	0x08002858

0800014c <display7SEG>:




/////////////////////////
void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
	case 0:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2101      	movs	r1, #1
 8000190:	48b4      	ldr	r0, [pc, #720]	@ (8000464 <display7SEG+0x318>)
 8000192:	f001 fb49 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2102      	movs	r1, #2
 800019a:	48b2      	ldr	r0, [pc, #712]	@ (8000464 <display7SEG+0x318>)
 800019c:	f001 fb44 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2104      	movs	r1, #4
 80001a4:	48af      	ldr	r0, [pc, #700]	@ (8000464 <display7SEG+0x318>)
 80001a6:	f001 fb3f 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2108      	movs	r1, #8
 80001ae:	48ad      	ldr	r0, [pc, #692]	@ (8000464 <display7SEG+0x318>)
 80001b0:	f001 fb3a 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2110      	movs	r1, #16
 80001b8:	48aa      	ldr	r0, [pc, #680]	@ (8000464 <display7SEG+0x318>)
 80001ba:	f001 fb35 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2120      	movs	r1, #32
 80001c2:	48a8      	ldr	r0, [pc, #672]	@ (8000464 <display7SEG+0x318>)
 80001c4:	f001 fb30 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2140      	movs	r1, #64	@ 0x40
 80001cc:	48a5      	ldr	r0, [pc, #660]	@ (8000464 <display7SEG+0x318>)
 80001ce:	f001 fb2b 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 80001d2:	e143      	b.n	800045c <display7SEG+0x310>
	}
	case 1:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2101      	movs	r1, #1
 80001d8:	48a2      	ldr	r0, [pc, #648]	@ (8000464 <display7SEG+0x318>)
 80001da:	f001 fb25 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2102      	movs	r1, #2
 80001e2:	48a0      	ldr	r0, [pc, #640]	@ (8000464 <display7SEG+0x318>)
 80001e4:	f001 fb20 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2104      	movs	r1, #4
 80001ec:	489d      	ldr	r0, [pc, #628]	@ (8000464 <display7SEG+0x318>)
 80001ee:	f001 fb1b 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2108      	movs	r1, #8
 80001f6:	489b      	ldr	r0, [pc, #620]	@ (8000464 <display7SEG+0x318>)
 80001f8:	f001 fb16 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2110      	movs	r1, #16
 8000200:	4898      	ldr	r0, [pc, #608]	@ (8000464 <display7SEG+0x318>)
 8000202:	f001 fb11 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2120      	movs	r1, #32
 800020a:	4896      	ldr	r0, [pc, #600]	@ (8000464 <display7SEG+0x318>)
 800020c:	f001 fb0c 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2140      	movs	r1, #64	@ 0x40
 8000214:	4893      	ldr	r0, [pc, #588]	@ (8000464 <display7SEG+0x318>)
 8000216:	f001 fb07 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 800021a:	e11f      	b.n	800045c <display7SEG+0x310>
	}
	case 2:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	4890      	ldr	r0, [pc, #576]	@ (8000464 <display7SEG+0x318>)
 8000222:	f001 fb01 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	488e      	ldr	r0, [pc, #568]	@ (8000464 <display7SEG+0x318>)
 800022c:	f001 fafc 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2104      	movs	r1, #4
 8000234:	488b      	ldr	r0, [pc, #556]	@ (8000464 <display7SEG+0x318>)
 8000236:	f001 faf7 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	4889      	ldr	r0, [pc, #548]	@ (8000464 <display7SEG+0x318>)
 8000240:	f001 faf2 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	4886      	ldr	r0, [pc, #536]	@ (8000464 <display7SEG+0x318>)
 800024a:	f001 faed 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2120      	movs	r1, #32
 8000252:	4884      	ldr	r0, [pc, #528]	@ (8000464 <display7SEG+0x318>)
 8000254:	f001 fae8 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2140      	movs	r1, #64	@ 0x40
 800025c:	4881      	ldr	r0, [pc, #516]	@ (8000464 <display7SEG+0x318>)
 800025e:	f001 fae3 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 8000262:	e0fb      	b.n	800045c <display7SEG+0x310>
	}
	case 3:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2101      	movs	r1, #1
 8000268:	487e      	ldr	r0, [pc, #504]	@ (8000464 <display7SEG+0x318>)
 800026a:	f001 fadd 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	487c      	ldr	r0, [pc, #496]	@ (8000464 <display7SEG+0x318>)
 8000274:	f001 fad8 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	4879      	ldr	r0, [pc, #484]	@ (8000464 <display7SEG+0x318>)
 800027e:	f001 fad3 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2108      	movs	r1, #8
 8000286:	4877      	ldr	r0, [pc, #476]	@ (8000464 <display7SEG+0x318>)
 8000288:	f001 face 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	4874      	ldr	r0, [pc, #464]	@ (8000464 <display7SEG+0x318>)
 8000292:	f001 fac9 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	4872      	ldr	r0, [pc, #456]	@ (8000464 <display7SEG+0x318>)
 800029c:	f001 fac4 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2140      	movs	r1, #64	@ 0x40
 80002a4:	486f      	ldr	r0, [pc, #444]	@ (8000464 <display7SEG+0x318>)
 80002a6:	f001 fabf 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 80002aa:	e0d7      	b.n	800045c <display7SEG+0x310>
	}
	case 4:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2101      	movs	r1, #1
 80002b0:	486c      	ldr	r0, [pc, #432]	@ (8000464 <display7SEG+0x318>)
 80002b2:	f001 fab9 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	486a      	ldr	r0, [pc, #424]	@ (8000464 <display7SEG+0x318>)
 80002bc:	f001 fab4 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4867      	ldr	r0, [pc, #412]	@ (8000464 <display7SEG+0x318>)
 80002c6:	f001 faaf 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2108      	movs	r1, #8
 80002ce:	4865      	ldr	r0, [pc, #404]	@ (8000464 <display7SEG+0x318>)
 80002d0:	f001 faaa 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2110      	movs	r1, #16
 80002d8:	4862      	ldr	r0, [pc, #392]	@ (8000464 <display7SEG+0x318>)
 80002da:	f001 faa5 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4860      	ldr	r0, [pc, #384]	@ (8000464 <display7SEG+0x318>)
 80002e4:	f001 faa0 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	@ 0x40
 80002ec:	485d      	ldr	r0, [pc, #372]	@ (8000464 <display7SEG+0x318>)
 80002ee:	f001 fa9b 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 80002f2:	e0b3      	b.n	800045c <display7SEG+0x310>
	}
	case 5:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	485a      	ldr	r0, [pc, #360]	@ (8000464 <display7SEG+0x318>)
 80002fa:	f001 fa95 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2102      	movs	r1, #2
 8000302:	4858      	ldr	r0, [pc, #352]	@ (8000464 <display7SEG+0x318>)
 8000304:	f001 fa90 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4855      	ldr	r0, [pc, #340]	@ (8000464 <display7SEG+0x318>)
 800030e:	f001 fa8b 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4853      	ldr	r0, [pc, #332]	@ (8000464 <display7SEG+0x318>)
 8000318:	f001 fa86 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4850      	ldr	r0, [pc, #320]	@ (8000464 <display7SEG+0x318>)
 8000322:	f001 fa81 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2120      	movs	r1, #32
 800032a:	484e      	ldr	r0, [pc, #312]	@ (8000464 <display7SEG+0x318>)
 800032c:	f001 fa7c 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	@ 0x40
 8000334:	484b      	ldr	r0, [pc, #300]	@ (8000464 <display7SEG+0x318>)
 8000336:	f001 fa77 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 800033a:	e08f      	b.n	800045c <display7SEG+0x310>
	}
	case 6:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2101      	movs	r1, #1
 8000340:	4848      	ldr	r0, [pc, #288]	@ (8000464 <display7SEG+0x318>)
 8000342:	f001 fa71 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2102      	movs	r1, #2
 800034a:	4846      	ldr	r0, [pc, #280]	@ (8000464 <display7SEG+0x318>)
 800034c:	f001 fa6c 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4843      	ldr	r0, [pc, #268]	@ (8000464 <display7SEG+0x318>)
 8000356:	f001 fa67 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2108      	movs	r1, #8
 800035e:	4841      	ldr	r0, [pc, #260]	@ (8000464 <display7SEG+0x318>)
 8000360:	f001 fa62 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2110      	movs	r1, #16
 8000368:	483e      	ldr	r0, [pc, #248]	@ (8000464 <display7SEG+0x318>)
 800036a:	f001 fa5d 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	483c      	ldr	r0, [pc, #240]	@ (8000464 <display7SEG+0x318>)
 8000374:	f001 fa58 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	@ 0x40
 800037c:	4839      	ldr	r0, [pc, #228]	@ (8000464 <display7SEG+0x318>)
 800037e:	f001 fa53 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 8000382:	e06b      	b.n	800045c <display7SEG+0x310>
	}
	case 7:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	4836      	ldr	r0, [pc, #216]	@ (8000464 <display7SEG+0x318>)
 800038a:	f001 fa4d 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2102      	movs	r1, #2
 8000392:	4834      	ldr	r0, [pc, #208]	@ (8000464 <display7SEG+0x318>)
 8000394:	f001 fa48 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4831      	ldr	r0, [pc, #196]	@ (8000464 <display7SEG+0x318>)
 800039e:	f001 fa43 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2108      	movs	r1, #8
 80003a6:	482f      	ldr	r0, [pc, #188]	@ (8000464 <display7SEG+0x318>)
 80003a8:	f001 fa3e 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	482c      	ldr	r0, [pc, #176]	@ (8000464 <display7SEG+0x318>)
 80003b2:	f001 fa39 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2120      	movs	r1, #32
 80003ba:	482a      	ldr	r0, [pc, #168]	@ (8000464 <display7SEG+0x318>)
 80003bc:	f001 fa34 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	@ 0x40
 80003c4:	4827      	ldr	r0, [pc, #156]	@ (8000464 <display7SEG+0x318>)
 80003c6:	f001 fa2f 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 80003ca:	e047      	b.n	800045c <display7SEG+0x310>
	}
	case 8:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	4824      	ldr	r0, [pc, #144]	@ (8000464 <display7SEG+0x318>)
 80003d2:	f001 fa29 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2102      	movs	r1, #2
 80003da:	4822      	ldr	r0, [pc, #136]	@ (8000464 <display7SEG+0x318>)
 80003dc:	f001 fa24 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	481f      	ldr	r0, [pc, #124]	@ (8000464 <display7SEG+0x318>)
 80003e6:	f001 fa1f 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	481d      	ldr	r0, [pc, #116]	@ (8000464 <display7SEG+0x318>)
 80003f0:	f001 fa1a 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	481a      	ldr	r0, [pc, #104]	@ (8000464 <display7SEG+0x318>)
 80003fa:	f001 fa15 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	4818      	ldr	r0, [pc, #96]	@ (8000464 <display7SEG+0x318>)
 8000404:	f001 fa10 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	@ 0x40
 800040c:	4815      	ldr	r0, [pc, #84]	@ (8000464 <display7SEG+0x318>)
 800040e:	f001 fa0b 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 8000412:	e023      	b.n	800045c <display7SEG+0x310>
	}
	case 9:{
	    HAL_GPIO_WritePin(GPIOB, SEG0, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4812      	ldr	r0, [pc, #72]	@ (8000464 <display7SEG+0x318>)
 800041a:	f001 fa05 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG1, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4810      	ldr	r0, [pc, #64]	@ (8000464 <display7SEG+0x318>)
 8000424:	f001 fa00 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG2, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	480d      	ldr	r0, [pc, #52]	@ (8000464 <display7SEG+0x318>)
 800042e:	f001 f9fb 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG3, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2108      	movs	r1, #8
 8000436:	480b      	ldr	r0, [pc, #44]	@ (8000464 <display7SEG+0x318>)
 8000438:	f001 f9f6 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG4, GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	4808      	ldr	r0, [pc, #32]	@ (8000464 <display7SEG+0x318>)
 8000442:	f001 f9f1 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG5, GPIO_PIN_RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2120      	movs	r1, #32
 800044a:	4806      	ldr	r0, [pc, #24]	@ (8000464 <display7SEG+0x318>)
 800044c:	f001 f9ec 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, SEG6, GPIO_PIN_RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	@ 0x40
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <display7SEG+0x318>)
 8000456:	f001 f9e7 	bl	8001828 <HAL_GPIO_WritePin>
	    break;
 800045a:	bf00      	nop
	}
	}
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010c00 	.word	0x40010c00

08000468 <update7SEG>:

void update7SEG ( int index ){
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	switch ( index ){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b03      	cmp	r3, #3
 8000474:	d87a      	bhi.n	800056c <update7SEG+0x104>
 8000476:	a201      	add	r2, pc, #4	@ (adr r2, 800047c <update7SEG+0x14>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	0800048d 	.word	0x0800048d
 8000480:	080004c5 	.word	0x080004c5
 8000484:	080004fd 	.word	0x080004fd
 8000488:	08000535 	.word	0x08000535
	case 0:{
		// Display the first 7 SEG with led_buffer [0]
		display7SEG(led_buffer[0]);
 800048c:	4b39      	ldr	r3, [pc, #228]	@ (8000574 <update7SEG+0x10c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff fe5b 	bl	800014c <display7SEG>
		HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2140      	movs	r1, #64	@ 0x40
 800049a:	4837      	ldr	r0, [pc, #220]	@ (8000578 <update7SEG+0x110>)
 800049c:	f001 f9c4 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_SET);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	4834      	ldr	r0, [pc, #208]	@ (8000578 <update7SEG+0x110>)
 80004a6:	f001 f9bf 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004b0:	4831      	ldr	r0, [pc, #196]	@ (8000578 <update7SEG+0x110>)
 80004b2:	f001 f9b9 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_SET);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004bc:	482e      	ldr	r0, [pc, #184]	@ (8000578 <update7SEG+0x110>)
 80004be:	f001 f9b3 	bl	8001828 <HAL_GPIO_WritePin>
		break ;
 80004c2:	e053      	b.n	800056c <update7SEG+0x104>
	}
	case 1:{
		// Display the second 7 SEG with led_buffer [1]
		display7SEG(led_buffer[1]);
 80004c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <update7SEG+0x10c>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff fe3f 	bl	800014c <display7SEG>
	    HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_SET);
 80004ce:	2201      	movs	r2, #1
 80004d0:	2140      	movs	r1, #64	@ 0x40
 80004d2:	4829      	ldr	r0, [pc, #164]	@ (8000578 <update7SEG+0x110>)
 80004d4:	f001 f9a8 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_RESET);
 80004d8:	2200      	movs	r2, #0
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	4826      	ldr	r0, [pc, #152]	@ (8000578 <update7SEG+0x110>)
 80004de:	f001 f9a3 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e8:	4823      	ldr	r0, [pc, #140]	@ (8000578 <update7SEG+0x110>)
 80004ea:	f001 f99d 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_SET);
 80004ee:	2201      	movs	r2, #1
 80004f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004f4:	4820      	ldr	r0, [pc, #128]	@ (8000578 <update7SEG+0x110>)
 80004f6:	f001 f997 	bl	8001828 <HAL_GPIO_WritePin>
		break ;
 80004fa:	e037      	b.n	800056c <update7SEG+0x104>
	}
	case 2:{
		// Display the third 7 SEG with led_buffer [2]
		display7SEG(led_buffer[2]);
 80004fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000574 <update7SEG+0x10c>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe23 	bl	800014c <display7SEG>
	    HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2140      	movs	r1, #64	@ 0x40
 800050a:	481b      	ldr	r0, [pc, #108]	@ (8000578 <update7SEG+0x110>)
 800050c:	f001 f98c 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2180      	movs	r1, #128	@ 0x80
 8000514:	4818      	ldr	r0, [pc, #96]	@ (8000578 <update7SEG+0x110>)
 8000516:	f001 f987 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000520:	4815      	ldr	r0, [pc, #84]	@ (8000578 <update7SEG+0x110>)
 8000522:	f001 f981 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800052c:	4812      	ldr	r0, [pc, #72]	@ (8000578 <update7SEG+0x110>)
 800052e:	f001 f97b 	bl	8001828 <HAL_GPIO_WritePin>
		break ;
 8000532:	e01b      	b.n	800056c <update7SEG+0x104>
	}
	case 3:
	{
		// Display the forth 7 SEG with led_buffer [3]
		display7SEG(led_buffer[3]);
 8000534:	4b0f      	ldr	r3, [pc, #60]	@ (8000574 <update7SEG+0x10c>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe07 	bl	800014c <display7SEG>
	    HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2140      	movs	r1, #64	@ 0x40
 8000542:	480d      	ldr	r0, [pc, #52]	@ (8000578 <update7SEG+0x110>)
 8000544:	f001 f970 	bl	8001828 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2180      	movs	r1, #128	@ 0x80
 800054c:	480a      	ldr	r0, [pc, #40]	@ (8000578 <update7SEG+0x110>)
 800054e:	f001 f96b 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000558:	4807      	ldr	r0, [pc, #28]	@ (8000578 <update7SEG+0x110>)
 800055a:	f001 f965 	bl	8001828 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000564:	4804      	ldr	r0, [pc, #16]	@ (8000578 <update7SEG+0x110>)
 8000566:	f001 f95f 	bl	8001828 <HAL_GPIO_WritePin>
		break ;
 800056a:	bf00      	nop
	}
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	40010800 	.word	0x40010800

0800057c <updateClockBuffer>:

void updateClockBuffer(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	led_buffer[0]= hour/10;
 8000580:	4b1a      	ldr	r3, [pc, #104]	@ (80005ec <updateClockBuffer+0x70>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1a      	ldr	r2, [pc, #104]	@ (80005f0 <updateClockBuffer+0x74>)
 8000586:	fb82 1203 	smull	r1, r2, r2, r3
 800058a:	1092      	asrs	r2, r2, #2
 800058c:	17db      	asrs	r3, r3, #31
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	4a18      	ldr	r2, [pc, #96]	@ (80005f4 <updateClockBuffer+0x78>)
 8000592:	6013      	str	r3, [r2, #0]
	led_buffer[1]= hour %10;
 8000594:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <updateClockBuffer+0x70>)
 8000596:	6819      	ldr	r1, [r3, #0]
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <updateClockBuffer+0x74>)
 800059a:	fb83 2301 	smull	r2, r3, r3, r1
 800059e:	109a      	asrs	r2, r3, #2
 80005a0:	17cb      	asrs	r3, r1, #31
 80005a2:	1ad2      	subs	r2, r2, r3
 80005a4:	4613      	mov	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	4413      	add	r3, r2
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1aca      	subs	r2, r1, r3
 80005ae:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <updateClockBuffer+0x78>)
 80005b0:	605a      	str	r2, [r3, #4]
	led_buffer[2] = minute /10;
 80005b2:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <updateClockBuffer+0x7c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <updateClockBuffer+0x74>)
 80005b8:	fb82 1203 	smull	r1, r2, r2, r3
 80005bc:	1092      	asrs	r2, r2, #2
 80005be:	17db      	asrs	r3, r3, #31
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	4a0c      	ldr	r2, [pc, #48]	@ (80005f4 <updateClockBuffer+0x78>)
 80005c4:	6093      	str	r3, [r2, #8]
	led_buffer[3] = minute %10;
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <updateClockBuffer+0x7c>)
 80005c8:	6819      	ldr	r1, [r3, #0]
 80005ca:	4b09      	ldr	r3, [pc, #36]	@ (80005f0 <updateClockBuffer+0x74>)
 80005cc:	fb83 2301 	smull	r2, r3, r3, r1
 80005d0:	109a      	asrs	r2, r3, #2
 80005d2:	17cb      	asrs	r3, r1, #31
 80005d4:	1ad2      	subs	r2, r2, r3
 80005d6:	4613      	mov	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4413      	add	r3, r2
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	1aca      	subs	r2, r1, r3
 80005e0:	4b04      	ldr	r3, [pc, #16]	@ (80005f4 <updateClockBuffer+0x78>)
 80005e2:	60da      	str	r2, [r3, #12]
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	20000010 	.word	0x20000010
 80005f0:	66666667 	.word	0x66666667
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000014 	.word	0x20000014

080005fc <displayROWLEDMatrix>:

void displayROWLEDMatrix(uint8_t value){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA,ENM0, !((value >> 7) & 1));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	09db      	lsrs	r3, r3, #7
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	2b00      	cmp	r3, #0
 8000612:	bf0c      	ite	eq
 8000614:	2301      	moveq	r3, #1
 8000616:	2300      	movne	r3, #0
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2104      	movs	r1, #4
 800061e:	483a      	ldr	r0, [pc, #232]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 8000620:	f001 f902 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM1, !((value >> 6) & 1));
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	099b      	lsrs	r3, r3, #6
 8000628:	b2db      	uxtb	r3, r3
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	bf0c      	ite	eq
 8000632:	2301      	moveq	r3, #1
 8000634:	2300      	movne	r3, #0
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	2108      	movs	r1, #8
 800063c:	4832      	ldr	r0, [pc, #200]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 800063e:	f001 f8f3 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM2, !((value >> 5) & 1));
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	095b      	lsrs	r3, r3, #5
 8000646:	b2db      	uxtb	r3, r3
 8000648:	f003 0301 	and.w	r3, r3, #1
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf0c      	ite	eq
 8000650:	2301      	moveq	r3, #1
 8000652:	2300      	movne	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800065c:	482a      	ldr	r0, [pc, #168]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 800065e:	f001 f8e3 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM3, !((value >> 4) & 1));
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf0c      	ite	eq
 8000670:	2301      	moveq	r3, #1
 8000672:	2300      	movne	r3, #0
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800067c:	4822      	ldr	r0, [pc, #136]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 800067e:	f001 f8d3 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM4, !((value >> 3) & 1));
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	08db      	lsrs	r3, r3, #3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf0c      	ite	eq
 8000690:	2301      	moveq	r3, #1
 8000692:	2300      	movne	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800069c:	481a      	ldr	r0, [pc, #104]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 800069e:	f001 f8c3 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM5, !((value >> 2) & 1));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	bf0c      	ite	eq
 80006b0:	2301      	moveq	r3, #1
 80006b2:	2300      	movne	r3, #0
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	461a      	mov	r2, r3
 80006b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006bc:	4812      	ldr	r0, [pc, #72]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 80006be:	f001 f8b3 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM6, !((value >> 1) & 1));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	085b      	lsrs	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	bf0c      	ite	eq
 80006d0:	2301      	moveq	r3, #1
 80006d2:	2300      	movne	r3, #0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006dc:	480a      	ldr	r0, [pc, #40]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 80006de:	f001 f8a3 	bl	8001828 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,ENM7, !((value) & 1));
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf0c      	ite	eq
 80006ec:	2301      	moveq	r3, #1
 80006ee:	2300      	movne	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	461a      	mov	r2, r3
 80006f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f8:	4803      	ldr	r0, [pc, #12]	@ (8000708 <displayROWLEDMatrix+0x10c>)
 80006fa:	f001 f895 	bl	8001828 <HAL_GPIO_WritePin>
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40010800 	.word	0x40010800

0800070c <updateLEDMatrix>:

void updateLEDMatrix (int index ){
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	switch ( index ){
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b07      	cmp	r3, #7
 8000718:	f200 81c8 	bhi.w	8000aac <updateLEDMatrix+0x3a0>
 800071c:	a201      	add	r2, pc, #4	@ (adr r2, 8000724 <updateLEDMatrix+0x18>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000745 	.word	0x08000745
 8000728:	080007b1 	.word	0x080007b1
 800072c:	0800081d 	.word	0x0800081d
 8000730:	08000889 	.word	0x08000889
 8000734:	080008f5 	.word	0x080008f5
 8000738:	08000961 	.word	0x08000961
 800073c:	080009cd 	.word	0x080009cd
 8000740:	08000a41 	.word	0x08000a41
		case 0:{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074a:	48bb      	ldr	r0, [pc, #748]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800074c:	f001 f86c 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000756:	48b8      	ldr	r0, [pc, #736]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000758:	f001 f866 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000762:	48b5      	ldr	r0, [pc, #724]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000764:	f001 f860 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800076e:	48b2      	ldr	r0, [pc, #712]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000770:	f001 f85a 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800077a:	48af      	ldr	r0, [pc, #700]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800077c:	f001 f854 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000786:	48ac      	ldr	r0, [pc, #688]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000788:	f001 f84e 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000792:	48a9      	ldr	r0, [pc, #676]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000794:	f001 f848 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800079e:	48a6      	ldr	r0, [pc, #664]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007a0:	f001 f842 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[0]);
 80007a4:	4ba5      	ldr	r3, [pc, #660]	@ (8000a3c <updateLEDMatrix+0x330>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff27 	bl	80005fc <displayROWLEDMatrix>
			break ;
 80007ae:	e17d      	b.n	8000aac <updateLEDMatrix+0x3a0>
		}
		case 1:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b6:	48a0      	ldr	r0, [pc, #640]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007b8:	f001 f836 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007c2:	489d      	ldr	r0, [pc, #628]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007c4:	f001 f830 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ce:	489a      	ldr	r0, [pc, #616]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007d0:	f001 f82a 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 80007d4:	2201      	movs	r2, #1
 80007d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007da:	4897      	ldr	r0, [pc, #604]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007dc:	f001 f824 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 80007e0:	2201      	movs	r2, #1
 80007e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007e6:	4894      	ldr	r0, [pc, #592]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007e8:	f001 f81e 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f2:	4891      	ldr	r0, [pc, #580]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80007f4:	f001 f818 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007fe:	488e      	ldr	r0, [pc, #568]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000800:	f001 f812 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800080a:	488b      	ldr	r0, [pc, #556]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800080c:	f001 f80c 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[1]);
 8000810:	4b8a      	ldr	r3, [pc, #552]	@ (8000a3c <updateLEDMatrix+0x330>)
 8000812:	785b      	ldrb	r3, [r3, #1]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fef1 	bl	80005fc <displayROWLEDMatrix>
			break ;
 800081a:	e147      	b.n	8000aac <updateLEDMatrix+0x3a0>
		}
		case 2:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000822:	4885      	ldr	r0, [pc, #532]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000824:	f001 f800 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082e:	4882      	ldr	r0, [pc, #520]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000830:	f000 fffa 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800083a:	487f      	ldr	r0, [pc, #508]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800083c:	f000 fff4 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000846:	487c      	ldr	r0, [pc, #496]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000848:	f000 ffee 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000852:	4879      	ldr	r0, [pc, #484]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000854:	f000 ffe8 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800085e:	4876      	ldr	r0, [pc, #472]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000860:	f000 ffe2 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800086a:	4873      	ldr	r0, [pc, #460]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800086c:	f000 ffdc 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000876:	4870      	ldr	r0, [pc, #448]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000878:	f000 ffd6 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[2]);
 800087c:	4b6f      	ldr	r3, [pc, #444]	@ (8000a3c <updateLEDMatrix+0x330>)
 800087e:	789b      	ldrb	r3, [r3, #2]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff febb 	bl	80005fc <displayROWLEDMatrix>
			break ;
 8000886:	e111      	b.n	8000aac <updateLEDMatrix+0x3a0>
		}
		case 3:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800088e:	486a      	ldr	r0, [pc, #424]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000890:	f000 ffca 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800089a:	4867      	ldr	r0, [pc, #412]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800089c:	f000 ffc4 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008a6:	4864      	ldr	r0, [pc, #400]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008a8:	f000 ffbe 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b2:	4861      	ldr	r0, [pc, #388]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008b4:	f000 ffb8 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008be:	485e      	ldr	r0, [pc, #376]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008c0:	f000 ffb2 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 80008c4:	2201      	movs	r2, #1
 80008c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008ca:	485b      	ldr	r0, [pc, #364]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008cc:	f000 ffac 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008d6:	4858      	ldr	r0, [pc, #352]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008d8:	f000 ffa6 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008e2:	4855      	ldr	r0, [pc, #340]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008e4:	f000 ffa0 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[3]);
 80008e8:	4b54      	ldr	r3, [pc, #336]	@ (8000a3c <updateLEDMatrix+0x330>)
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe85 	bl	80005fc <displayROWLEDMatrix>
			break ;
 80008f2:	e0db      	b.n	8000aac <updateLEDMatrix+0x3a0>
		}
		case 4:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008fa:	484f      	ldr	r0, [pc, #316]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80008fc:	f000 ff94 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000906:	484c      	ldr	r0, [pc, #304]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000908:	f000 ff8e 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000912:	4849      	ldr	r0, [pc, #292]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000914:	f000 ff88 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800091e:	4846      	ldr	r0, [pc, #280]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000920:	f000 ff82 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_RESET);
 8000924:	2200      	movs	r2, #0
 8000926:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800092a:	4843      	ldr	r0, [pc, #268]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800092c:	f000 ff7c 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000936:	4840      	ldr	r0, [pc, #256]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000938:	f000 ff76 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000942:	483d      	ldr	r0, [pc, #244]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000944:	f000 ff70 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800094e:	483a      	ldr	r0, [pc, #232]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000950:	f000 ff6a 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[4]);
 8000954:	4b39      	ldr	r3, [pc, #228]	@ (8000a3c <updateLEDMatrix+0x330>)
 8000956:	791b      	ldrb	r3, [r3, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe4f 	bl	80005fc <displayROWLEDMatrix>
			break ;
 800095e:	e0a5      	b.n	8000aac <updateLEDMatrix+0x3a0>
		}
		case 5:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000966:	4834      	ldr	r0, [pc, #208]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000968:	f000 ff5e 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000972:	4831      	ldr	r0, [pc, #196]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000974:	f000 ff58 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097e:	482e      	ldr	r0, [pc, #184]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000980:	f000 ff52 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800098a:	482b      	ldr	r0, [pc, #172]	@ (8000a38 <updateLEDMatrix+0x32c>)
 800098c:	f000 ff4c 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000996:	4828      	ldr	r0, [pc, #160]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000998:	f000 ff46 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a2:	4825      	ldr	r0, [pc, #148]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009a4:	f000 ff40 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009ae:	4822      	ldr	r0, [pc, #136]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009b0:	f000 ff3a 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009ba:	481f      	ldr	r0, [pc, #124]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009bc:	f000 ff34 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[5]);
 80009c0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <updateLEDMatrix+0x330>)
 80009c2:	795b      	ldrb	r3, [r3, #5]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fe19 	bl	80005fc <displayROWLEDMatrix>
			break ;
 80009ca:	e06f      	b.n	8000aac <updateLEDMatrix+0x3a0>
		}
		case 6:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009d2:	4819      	ldr	r0, [pc, #100]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009d4:	f000 ff28 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009de:	4816      	ldr	r0, [pc, #88]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009e0:	f000 ff22 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009ec:	f000 ff1c 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f6:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <updateLEDMatrix+0x32c>)
 80009f8:	f000 ff16 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a02:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000a04:	f000 ff10 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a0e:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000a10:	f000 ff0a 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a1a:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000a1c:	f000 ff04 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a26:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <updateLEDMatrix+0x32c>)
 8000a28:	f000 fefe 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[6]);
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <updateLEDMatrix+0x330>)
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fde3 	bl	80005fc <displayROWLEDMatrix>
			break ;
 8000a36:	e039      	b.n	8000aac <updateLEDMatrix+0x3a0>
 8000a38:	40010c00 	.word	0x40010c00
 8000a3c:	2000001c 	.word	0x2000001c
		}
		case 7:
		{
			HAL_GPIO_WritePin(GPIOB, ROW0, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a46:	481b      	ldr	r0, [pc, #108]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a48:	f000 feee 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW1, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a52:	4818      	ldr	r0, [pc, #96]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a54:	f000 fee8 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW2, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a5e:	4815      	ldr	r0, [pc, #84]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a60:	f000 fee2 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW3, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a6a:	4812      	ldr	r0, [pc, #72]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a6c:	f000 fedc 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW4, GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a76:	480f      	ldr	r0, [pc, #60]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a78:	f000 fed6 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW5, GPIO_PIN_SET);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a82:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a84:	f000 fed0 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW6, GPIO_PIN_SET);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a8e:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a90:	f000 feca 	bl	8001828 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, ROW7, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9a:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <updateLEDMatrix+0x3a8>)
 8000a9c:	f000 fec4 	bl	8001828 <HAL_GPIO_WritePin>
			displayROWLEDMatrix( matrix_buffer[7]);
 8000aa0:	4b05      	ldr	r3, [pc, #20]	@ (8000ab8 <updateLEDMatrix+0x3ac>)
 8000aa2:	79db      	ldrb	r3, [r3, #7]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fda9 	bl	80005fc <displayROWLEDMatrix>
			break ;
 8000aaa:	bf00      	nop
		}
	}
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40010c00 	.word	0x40010c00
 8000ab8:	2000001c 	.word	0x2000001c

08000abc <shift_right_around>:

void shift_right_around(){
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	matrix_buffer [0] =  (matrix_buffer [0] >> 1) | (matrix_buffer [0] << (7));
 8000ac0:	4b39      	ldr	r3, [pc, #228]	@ (8000ba8 <shift_right_around+0xec>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	085b      	lsrs	r3, r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	b25a      	sxtb	r2, r3
 8000aca:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <shift_right_around+0xec>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	01db      	lsls	r3, r3, #7
 8000ad0:	b25b      	sxtb	r3, r3
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	b25b      	sxtb	r3, r3
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b33      	ldr	r3, [pc, #204]	@ (8000ba8 <shift_right_around+0xec>)
 8000ada:	701a      	strb	r2, [r3, #0]
	matrix_buffer [1] =  (matrix_buffer [1] >> 1) | (matrix_buffer [1] << (7));
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <shift_right_around+0xec>)
 8000ade:	785b      	ldrb	r3, [r3, #1]
 8000ae0:	085b      	lsrs	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	b25a      	sxtb	r2, r3
 8000ae6:	4b30      	ldr	r3, [pc, #192]	@ (8000ba8 <shift_right_around+0xec>)
 8000ae8:	785b      	ldrb	r3, [r3, #1]
 8000aea:	01db      	lsls	r3, r3, #7
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b2c      	ldr	r3, [pc, #176]	@ (8000ba8 <shift_right_around+0xec>)
 8000af6:	705a      	strb	r2, [r3, #1]
	matrix_buffer [2] =  (matrix_buffer [2] >> 1) | (matrix_buffer [2] << (7));
 8000af8:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba8 <shift_right_around+0xec>)
 8000afa:	789b      	ldrb	r3, [r3, #2]
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	4b29      	ldr	r3, [pc, #164]	@ (8000ba8 <shift_right_around+0xec>)
 8000b04:	789b      	ldrb	r3, [r3, #2]
 8000b06:	01db      	lsls	r3, r3, #7
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b25      	ldr	r3, [pc, #148]	@ (8000ba8 <shift_right_around+0xec>)
 8000b12:	709a      	strb	r2, [r3, #2]
	matrix_buffer [3] =  (matrix_buffer [3] >> 1) | (matrix_buffer [3] << (7));
 8000b14:	4b24      	ldr	r3, [pc, #144]	@ (8000ba8 <shift_right_around+0xec>)
 8000b16:	78db      	ldrb	r3, [r3, #3]
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	b25a      	sxtb	r2, r3
 8000b1e:	4b22      	ldr	r3, [pc, #136]	@ (8000ba8 <shift_right_around+0xec>)
 8000b20:	78db      	ldrb	r3, [r3, #3]
 8000b22:	01db      	lsls	r3, r3, #7
 8000b24:	b25b      	sxtb	r3, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	b25b      	sxtb	r3, r3
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba8 <shift_right_around+0xec>)
 8000b2e:	70da      	strb	r2, [r3, #3]
	matrix_buffer [4] =  (matrix_buffer [4] >> 1) | (matrix_buffer [4] << (7));
 8000b30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba8 <shift_right_around+0xec>)
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25a      	sxtb	r2, r3
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <shift_right_around+0xec>)
 8000b3c:	791b      	ldrb	r3, [r3, #4]
 8000b3e:	01db      	lsls	r3, r3, #7
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	4313      	orrs	r3, r2
 8000b44:	b25b      	sxtb	r3, r3
 8000b46:	b2da      	uxtb	r2, r3
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <shift_right_around+0xec>)
 8000b4a:	711a      	strb	r2, [r3, #4]
	matrix_buffer [5] =  (matrix_buffer [5] >> 1) | (matrix_buffer [5] << (7));
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <shift_right_around+0xec>)
 8000b4e:	795b      	ldrb	r3, [r3, #5]
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	b25a      	sxtb	r2, r3
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <shift_right_around+0xec>)
 8000b58:	795b      	ldrb	r3, [r3, #5]
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	b25b      	sxtb	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <shift_right_around+0xec>)
 8000b66:	715a      	strb	r2, [r3, #5]
	matrix_buffer [6] =  (matrix_buffer [6] >> 1) | (matrix_buffer [6] << (7));
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <shift_right_around+0xec>)
 8000b6a:	799b      	ldrb	r3, [r3, #6]
 8000b6c:	085b      	lsrs	r3, r3, #1
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	b25a      	sxtb	r2, r3
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <shift_right_around+0xec>)
 8000b74:	799b      	ldrb	r3, [r3, #6]
 8000b76:	01db      	lsls	r3, r3, #7
 8000b78:	b25b      	sxtb	r3, r3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <shift_right_around+0xec>)
 8000b82:	719a      	strb	r2, [r3, #6]
	matrix_buffer [7] =  (matrix_buffer [7] >> 1) | (matrix_buffer [7] << (7));
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <shift_right_around+0xec>)
 8000b86:	79db      	ldrb	r3, [r3, #7]
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	b25a      	sxtb	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <shift_right_around+0xec>)
 8000b90:	79db      	ldrb	r3, [r3, #7]
 8000b92:	01db      	lsls	r3, r3, #7
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b25b      	sxtb	r3, r3
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ba8 <shift_right_around+0xec>)
 8000b9e:	71da      	strb	r2, [r3, #7]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	2000001c 	.word	0x2000001c

08000bac <INIT_LAB2_EX2>:
    HAL_GPIO_WritePin(GPIOA, LED_RED, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_RESET);
}

void INIT_LAB2_EX2(void){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
	//GPIOA SET UP
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <INIT_LAB2_EX2+0xc8>)
 8000bb4:	699b      	ldr	r3, [r3, #24]
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c74 <INIT_LAB2_EX2+0xc8>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6193      	str	r3, [r2, #24]
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <INIT_LAB2_EX2+0xc8>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = LED_RED|DOT|EN0|EN1|EN2|EN3;
 8000bd8:	f44f 737c 	mov.w	r3, #1008	@ 0x3f0
 8000bdc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2302      	movs	r3, #2
 8000be8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4821      	ldr	r0, [pc, #132]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000bf2:	f000 fc9d 	bl	8001530 <HAL_GPIO_Init>
    //GPIOB SET UP
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c74 <INIT_LAB2_EX2+0xc8>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c74 <INIT_LAB2_EX2+0xc8>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6193      	str	r3, [r2, #24]
 8000c02:	4b1c      	ldr	r3, [pc, #112]	@ (8000c74 <INIT_LAB2_EX2+0xc8>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = SEG0|SEG1|SEG2|SEG2|SEG3|SEG4|SEG5|SEG6;
 8000c0e:	237f      	movs	r3, #127	@ 0x7f
 8000c10:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	4619      	mov	r1, r3
 8000c24:	4815      	ldr	r0, [pc, #84]	@ (8000c7c <INIT_LAB2_EX2+0xd0>)
 8000c26:	f000 fc83 	bl	8001530 <HAL_GPIO_Init>
    //BEGIN
    HAL_GPIO_WritePin(GPIOA, LED_RED, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	4812      	ldr	r0, [pc, #72]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000c30:	f000 fdfa 	bl	8001828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DOT, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2110      	movs	r1, #16
 8000c38:	480f      	ldr	r0, [pc, #60]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000c3a:	f000 fdf5 	bl	8001828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, EN0, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2140      	movs	r1, #64	@ 0x40
 8000c42:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000c44:	f000 fdf0 	bl	8001828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, EN1, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	@ 0x80
 8000c4c:	480a      	ldr	r0, [pc, #40]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000c4e:	f000 fdeb 	bl	8001828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, EN2, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c58:	4807      	ldr	r0, [pc, #28]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000c5a:	f000 fde5 	bl	8001828 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, EN3, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c64:	4804      	ldr	r0, [pc, #16]	@ (8000c78 <INIT_LAB2_EX2+0xcc>)
 8000c66:	f000 fddf 	bl	8001828 <HAL_GPIO_WritePin>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00

08000c80 <INIT_LAB2_EX8>:
}

void INIT_LAB2_EX7(void){
	INIT_LAB2_EX2();
}
void INIT_LAB2_EX8(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	INIT_LAB2_EX2();
 8000c84:	f7ff ff92 	bl	8000bac <INIT_LAB2_EX2>
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <INIT_LAB2_EX9>:
void INIT_LAB2_EX9(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
	//GPIOA SET UP
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <INIT_LAB2_EX9+0x88>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	4a1f      	ldr	r2, [pc, #124]	@ (8000d14 <INIT_LAB2_EX9+0x88>)
 8000c98:	f043 0304 	orr.w	r3, r3, #4
 8000c9c:	6193      	str	r3, [r2, #24]
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <INIT_LAB2_EX9+0x88>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 0304 	and.w	r3, r3, #4
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0308 	add.w	r3, r7, #8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = ENM0|ENM1|ENM2|ENM3|ENM4|ENM5|ENM6|ENM7;
 8000cb8:	f64f 430c 	movw	r3, #64524	@ 0xfc0c
 8000cbc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <INIT_LAB2_EX9+0x8c>)
 8000cd2:	f000 fc2d 	bl	8001530 <HAL_GPIO_Init>
    //GPIOB SET UP
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <INIT_LAB2_EX9+0x88>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <INIT_LAB2_EX9+0x88>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <INIT_LAB2_EX9+0x88>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
    GPIO_InitStruct.Pin = ROW0|ROW1|ROW2|ROW3|ROW4|ROW5|ROW6|ROW7;
 8000cee:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000cf2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0308 	add.w	r3, r7, #8
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <INIT_LAB2_EX9+0x90>)
 8000d08:	f000 fc12 	bl	8001530 <HAL_GPIO_Init>
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010800 	.word	0x40010800
 8000d1c:	40010c00 	.word	0x40010c00

08000d20 <INIT_LAB2_EX10>:
void INIT_LAB2_EX10(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
	uint8_t right_arrow[8]={0x30,0x18,0x0c,0xfe,0xfe,0x0c,0x18,0x30};
 8000d26:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <INIT_LAB2_EX10+0x44>)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2e:	e883 0003 	stmia.w	r3, {r0, r1}
	for(int i =0; i < MAX_LED_MATRIX; i++){
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e00b      	b.n	8000d50 <INIT_LAB2_EX10+0x30>
		matrix_buffer [i] = right_arrow[i];
 8000d38:	1d3a      	adds	r2, r7, #4
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <INIT_LAB2_EX10+0x48>)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4413      	add	r3, r2
 8000d46:	460a      	mov	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < MAX_LED_MATRIX; i++){
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	2208      	movs	r2, #8
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4293      	cmp	r3, r2
 8000d56:	dbef      	blt.n	8000d38 <INIT_LAB2_EX10+0x18>
	}
	INIT_LAB2_EX9();
 8000d58:	f7ff ff98 	bl	8000c8c <INIT_LAB2_EX9>
}
 8000d5c:	bf00      	nop
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	08002870 	.word	0x08002870
 8000d68:	2000001c 	.word	0x2000001c

08000d6c <EXECUTE_LAB2_EX6>:
		}
		updateClockBuffer ();
		HAL_Delay (1000) ;
}

void EXECUTE_LAB2_EX6(void){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin ( GPIOA , LED_RED );
 8000d70:	2120      	movs	r1, #32
 8000d72:	4802      	ldr	r0, [pc, #8]	@ (8000d7c <EXECUTE_LAB2_EX6+0x10>)
 8000d74:	f000 fd70 	bl	8001858 <HAL_GPIO_TogglePin>
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40010800 	.word	0x40010800

08000d80 <EXECUTE_LAB2_EX7>:
void EXECUTE_LAB2_EX7(void){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	second ++;
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <EXECUTE_LAB2_EX7+0x5c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a14      	ldr	r2, [pc, #80]	@ (8000ddc <EXECUTE_LAB2_EX7+0x5c>)
 8000d8c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin ( GPIOA , DOT );
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4813      	ldr	r0, [pc, #76]	@ (8000de0 <EXECUTE_LAB2_EX7+0x60>)
 8000d92:	f000 fd61 	bl	8001858 <HAL_GPIO_TogglePin>
		if ( second >= 60) {
 8000d96:	4b11      	ldr	r3, [pc, #68]	@ (8000ddc <EXECUTE_LAB2_EX7+0x5c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b3b      	cmp	r3, #59	@ 0x3b
 8000d9c:	dd07      	ble.n	8000dae <EXECUTE_LAB2_EX7+0x2e>
			second = 0;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <EXECUTE_LAB2_EX7+0x5c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
			minute ++;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <EXECUTE_LAB2_EX7+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <EXECUTE_LAB2_EX7+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]
		}
		if( minute >= 60) {
 8000dae:	4b0d      	ldr	r3, [pc, #52]	@ (8000de4 <EXECUTE_LAB2_EX7+0x64>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b3b      	cmp	r3, #59	@ 0x3b
 8000db4:	dd07      	ble.n	8000dc6 <EXECUTE_LAB2_EX7+0x46>
			minute = 0;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <EXECUTE_LAB2_EX7+0x64>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
			hour ++;
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <EXECUTE_LAB2_EX7+0x68>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a09      	ldr	r2, [pc, #36]	@ (8000de8 <EXECUTE_LAB2_EX7+0x68>)
 8000dc4:	6013      	str	r3, [r2, #0]
		}
		if( hour >=24){
 8000dc6:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <EXECUTE_LAB2_EX7+0x68>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b17      	cmp	r3, #23
 8000dcc:	dd02      	ble.n	8000dd4 <EXECUTE_LAB2_EX7+0x54>
			 hour = 0;
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <EXECUTE_LAB2_EX7+0x68>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
		}
		updateClockBuffer ();
 8000dd4:	f7ff fbd2 	bl	800057c <updateClockBuffer>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000018 	.word	0x20000018
 8000de0:	40010800 	.word	0x40010800
 8000de4:	20000014 	.word	0x20000014
 8000de8:	20000010 	.word	0x20000010

08000dec <EXECUTE_LAB2_EX8>:
void EXECUTE_LAB2_EX8(void){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
		update7SEG (index_led++);
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <EXECUTE_LAB2_EX8+0x28>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <EXECUTE_LAB2_EX8+0x28>)
 8000df8:	600a      	str	r2, [r1, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fb34 	bl	8000468 <update7SEG>
		if(index_led == MAX_LED){index_led=0;}
 8000e00:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <EXECUTE_LAB2_EX8+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2204      	movs	r2, #4
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d102      	bne.n	8000e10 <EXECUTE_LAB2_EX8+0x24>
 8000e0a:	4b02      	ldr	r3, [pc, #8]	@ (8000e14 <EXECUTE_LAB2_EX8+0x28>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000050 	.word	0x20000050

08000e18 <EXECUTE_LAB2_EX9>:

void EXECUTE_LAB2_EX9(void){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	updateLEDMatrix(index_led_matrix++);
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <EXECUTE_LAB2_EX9+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4907      	ldr	r1, [pc, #28]	@ (8000e40 <EXECUTE_LAB2_EX9+0x28>)
 8000e24:	600a      	str	r2, [r1, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fc70 	bl	800070c <updateLEDMatrix>
	if(index_led_matrix >= MAX_LED_MATRIX){index_led_matrix=0;}
 8000e2c:	4b04      	ldr	r3, [pc, #16]	@ (8000e40 <EXECUTE_LAB2_EX9+0x28>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2208      	movs	r2, #8
 8000e32:	4293      	cmp	r3, r2
 8000e34:	db02      	blt.n	8000e3c <EXECUTE_LAB2_EX9+0x24>
 8000e36:	4b02      	ldr	r3, [pc, #8]	@ (8000e40 <EXECUTE_LAB2_EX9+0x28>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000054 	.word	0x20000054

08000e44 <EXECUTE_LAB2_EX10>:

void EXECUTE_LAB2_EX10(void){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	shift_right_around();
 8000e48:	f7ff fe38 	bl	8000abc <shift_right_around>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e54:	f000 f9fc 	bl	8001250 <HAL_Init>
  //INIT_LAB2_EX2();
  //INIT_LAB2_EX4();
  //INIT_LAB2_EX5();
  //INIT_LAB2_EX6();
  //INIT_LAB2_EX7();
  INIT_LAB2_EX8();
 8000e58:	f7ff ff12 	bl	8000c80 <INIT_LAB2_EX8>
  //INIT_LAB2_EX9();
  INIT_LAB2_EX10();
 8000e5c:	f7ff ff60 	bl	8000d20 <INIT_LAB2_EX10>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e60:	f000 f858 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000e64:	f000 f892 	bl	8000f8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000e68:	4828      	ldr	r0, [pc, #160]	@ (8000f0c <main+0xbc>)
 8000e6a:	f001 f93d 	bl	80020e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setTimer(0, 1000); //TIMER FOR LED
 8000e6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f978 	bl	8001168 <setTimer>
  setTimer(1, 1000); //TIMER FOR CLOCK&DOT
 8000e78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 f973 	bl	8001168 <setTimer>
  setTimer(2, 2000); //TIMER FOR 7SEG
 8000e82:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000e86:	2002      	movs	r0, #2
 8000e88:	f000 f96e 	bl	8001168 <setTimer>
  setTimer(3, 1000); //TIMER FOR MAXTRIX
 8000e8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f969 	bl	8001168 <setTimer>
  setTimer(4, 3000); //TIMER FOR EFFECT
 8000e96:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000e9a:	2004      	movs	r0, #4
 8000e9c:	f000 f964 	bl	8001168 <setTimer>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //EXECUTE_LAB2_EX5();
	  //TIMER EX6
	  if( timer_flag[0]== 1){
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <main+0xc0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d106      	bne.n	8000eb6 <main+0x66>
	  		setTimer(0,1000) ;
 8000ea8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000eac:	2000      	movs	r0, #0
 8000eae:	f000 f95b 	bl	8001168 <setTimer>
	  		EXECUTE_LAB2_EX6();
 8000eb2:	f7ff ff5b 	bl	8000d6c <EXECUTE_LAB2_EX6>
	  	}
	  //TIMER EX7
	  if( timer_flag[1]== 1){
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <main+0xc0>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d106      	bne.n	8000ecc <main+0x7c>
	  		setTimer(1,1000) ;
 8000ebe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f000 f950 	bl	8001168 <setTimer>
	  		EXECUTE_LAB2_EX7();
 8000ec8:	f7ff ff5a 	bl	8000d80 <EXECUTE_LAB2_EX7>
	  	}
	  //TIMER EX8
	  if( timer_flag[2]== 1){
 8000ecc:	4b10      	ldr	r3, [pc, #64]	@ (8000f10 <main+0xc0>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <main+0x90>
	  		setTimer(2,250) ;
 8000ed4:	21fa      	movs	r1, #250	@ 0xfa
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f000 f946 	bl	8001168 <setTimer>
	  		EXECUTE_LAB2_EX8();
 8000edc:	f7ff ff86 	bl	8000dec <EXECUTE_LAB2_EX8>
	  	}
	  //TIMER EX9
	  if( timer_flag[3]== 1){
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f10 <main+0xc0>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d105      	bne.n	8000ef4 <main+0xa4>
	  		setTimer(3,10) ;
 8000ee8:	210a      	movs	r1, #10
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 f93c 	bl	8001168 <setTimer>
	  		EXECUTE_LAB2_EX9();
 8000ef0:	f7ff ff92 	bl	8000e18 <EXECUTE_LAB2_EX9>
	  	}
	  if( timer_flag[4]== 1){
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <main+0xc0>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d1d1      	bne.n	8000ea0 <main+0x50>
	  		setTimer(4,500) ;
 8000efc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000f00:	2004      	movs	r0, #4
 8000f02:	f000 f931 	bl	8001168 <setTimer>
	  		EXECUTE_LAB2_EX10();
 8000f06:	f7ff ff9d 	bl	8000e44 <EXECUTE_LAB2_EX10>
	  if( timer_flag[0]== 1){
 8000f0a:	e7c9      	b.n	8000ea0 <main+0x50>
 8000f0c:	20000058 	.word	0x20000058
 8000f10:	200000a0 	.word	0x200000a0

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b090      	sub	sp, #64	@ 0x40
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0318 	add.w	r3, r7, #24
 8000f1e:	2228      	movs	r2, #40	@ 0x28
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 fc6c 	bl	8002800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f42:	2300      	movs	r3, #0
 8000f44:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f46:	f107 0318 	add.w	r3, r7, #24
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fc9e 	bl	800188c <HAL_RCC_OscConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f56:	f000 f86f 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5a:	230f      	movs	r3, #15
 8000f5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 ff0c 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f7e:	f000 f85b 	bl	8001038 <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3740      	adds	r7, #64	@ 0x40
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
	...

08000f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f92:	f107 0308 	add.w	r3, r7, #8
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa0:	463b      	mov	r3, r7
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000faa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fb2:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000fb6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fc0:	2209      	movs	r2, #9
 8000fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b16      	ldr	r3, [pc, #88]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fd0:	4813      	ldr	r0, [pc, #76]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fd2:	f001 f839 	bl	8002048 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fdc:	f000 f82c 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0308 	add.w	r3, r7, #8
 8000fea:	4619      	mov	r1, r3
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <MX_TIM2_Init+0x94>)
 8000fee:	f001 f9b7 	bl	8002360 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ff8:	f000 f81e 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <MX_TIM2_Init+0x94>)
 800100a:	f001 fb8f 	bl	800272c <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001014:	f000 f810 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000058 	.word	0x20000058

08001024 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	//EXECUTE_LAB2_EX0();
	//EXECUTE_LAB2_EX1();
	//EXECUTE_LAB2_EX2();
	//EXECUTE_LAB2_EX4();
	timer_run();
 800102c:	f000 f8ba 	bl	80011a4 <timer_run>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001068:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106c:	61d3      	str	r3, [r2, #28]
 800106e:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	@ (80010a4 <HAL_MspInit+0x60>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4a04      	ldr	r2, [pc, #16]	@ (80010a4 <HAL_MspInit+0x60>)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001096:	bf00      	nop
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40010000 	.word	0x40010000

080010a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010b8:	d113      	bne.n	80010e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ba:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <HAL_TIM_Base_MspInit+0x44>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a0b      	ldr	r2, [pc, #44]	@ (80010ec <HAL_TIM_Base_MspInit+0x44>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_TIM_Base_MspInit+0x44>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2100      	movs	r1, #0
 80010d6:	201c      	movs	r0, #28
 80010d8:	f000 f9f3 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010dc:	201c      	movs	r0, #28
 80010de:	f000 fa0c 	bl	80014fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40021000 	.word	0x40021000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <NMI_Handler+0x4>

080010f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <MemManage_Handler+0x4>

08001108 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <UsageFault_Handler+0x4>

08001118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f8cc 	bl	80012dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <TIM2_IRQHandler+0x10>)
 800114e:	f001 f817 	bl	8002180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000058 	.word	0x20000058

0800115c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <setTimer>:

int timer_flag[5]={0,0,0,0,0};
int timer_counter[5]={0,0,0,0,0};
int TIMER_CYCLE = 10; //=counter period

void setTimer(int index, int counter){
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	timer_flag[index]=0;
 8001172:	4a09      	ldr	r2, [pc, #36]	@ (8001198 <setTimer+0x30>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2100      	movs	r1, #0
 8001178:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_counter[index] = counter/TIMER_CYCLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	@ (800119c <setTimer+0x34>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	fb92 f2f3 	sdiv	r2, r2, r3
 8001186:	4906      	ldr	r1, [pc, #24]	@ (80011a0 <setTimer+0x38>)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	200000a0 	.word	0x200000a0
 800119c:	20000028 	.word	0x20000028
 80011a0:	200000b4 	.word	0x200000b4

080011a4 <timer_run>:
void timer_run(){
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
	for(int i=0;i<5;i++){
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	e01c      	b.n	80011ea <timer_run+0x46>
		if(timer_counter[i]>0){
 80011b0:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <timer_run+0x58>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd13      	ble.n	80011e4 <timer_run+0x40>
			timer_counter[i]--;
 80011bc:	4a0f      	ldr	r2, [pc, #60]	@ (80011fc <timer_run+0x58>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	490d      	ldr	r1, [pc, #52]	@ (80011fc <timer_run+0x58>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i]<=0){
 80011ce:	4a0b      	ldr	r2, [pc, #44]	@ (80011fc <timer_run+0x58>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	dc04      	bgt.n	80011e4 <timer_run+0x40>
				 timer_flag[i]=1;
 80011da:	4a09      	ldr	r2, [pc, #36]	@ (8001200 <timer_run+0x5c>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2101      	movs	r1, #1
 80011e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<5;i++){
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3301      	adds	r3, #1
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	dddf      	ble.n	80011b0 <timer_run+0xc>
			}
		}
	}
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	200000b4 	.word	0x200000b4
 8001200:	200000a0 	.word	0x200000a0

08001204 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff ffaa 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480b      	ldr	r0, [pc, #44]	@ (8001238 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800120a:	490c      	ldr	r1, [pc, #48]	@ (800123c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800120c:	4a0c      	ldr	r2, [pc, #48]	@ (8001240 <LoopFillZerobss+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a09      	ldr	r2, [pc, #36]	@ (8001244 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001220:	4c09      	ldr	r4, [pc, #36]	@ (8001248 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f001 faef 	bl	8002810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001232:	f7ff fe0d 	bl	8000e50 <main>
  bx lr
 8001236:	4770      	bx	lr
  ldr r0, =_sdata
 8001238:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800123c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001240:	080028a4 	.word	0x080028a4
  ldr r2, =_sbss
 8001244:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001248:	200000cc 	.word	0x200000cc

0800124c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC1_2_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001254:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_Init+0x28>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <HAL_Init+0x28>)
 800125a:	f043 0310 	orr.w	r3, r3, #16
 800125e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f923 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001266:	200f      	movs	r0, #15
 8001268:	f000 f808 	bl	800127c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800126c:	f7ff feea 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40022000 	.word	0x40022000

0800127c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <HAL_InitTick+0x54>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <HAL_InitTick+0x58>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	fbb3 f3f1 	udiv	r3, r3, r1
 8001296:	fbb2 f3f3 	udiv	r3, r2, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f93b 	bl	8001516 <HAL_SYSTICK_Config>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00e      	b.n	80012c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80a      	bhi.n	80012c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b0:	2200      	movs	r2, #0
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	f000 f903 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012bc:	4a06      	ldr	r2, [pc, #24]	@ (80012d8 <HAL_InitTick+0x5c>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	e000      	b.n	80012c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000024 	.word	0x20000024
 80012d4:	20000030 	.word	0x20000030
 80012d8:	2000002c 	.word	0x2000002c

080012dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <HAL_IncTick+0x1c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_IncTick+0x20>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <HAL_IncTick+0x20>)
 80012ee:	6013      	str	r3, [r2, #0]
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	20000030 	.word	0x20000030
 80012fc:	200000c8 	.word	0x200000c8

08001300 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return uwTick;
 8001304:	4b02      	ldr	r3, [pc, #8]	@ (8001310 <HAL_GetTick+0x10>)
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200000c8 	.word	0x200000c8

08001314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001330:	4013      	ands	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800133c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001340:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x44>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <__NVIC_GetPriorityGrouping+0x18>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	f003 0307 	and.w	r3, r3, #7
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	2b00      	cmp	r3, #0
 8001388:	db0b      	blt.n	80013a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	f003 021f 	and.w	r2, r3, #31
 8001390:	4906      	ldr	r1, [pc, #24]	@ (80013ac <__NVIC_EnableIRQ+0x34>)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	095b      	lsrs	r3, r3, #5
 8001398:	2001      	movs	r0, #1
 800139a:	fa00 f202 	lsl.w	r2, r0, r2
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	@ (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	@ (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	@ 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	@ 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff90 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff2d 	bl	8001314 <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d4:	f7ff ff42 	bl	800135c <__NVIC_GetPriorityGrouping>
 80014d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f7ff ff90 	bl	8001404 <NVIC_EncodePriority>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	4611      	mov	r1, r2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff5f 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff35 	bl	8001378 <__NVIC_EnableIRQ>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffa2 	bl	8001468 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b08b      	sub	sp, #44	@ 0x2c
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001542:	e161      	b.n	8001808 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001544:	2201      	movs	r2, #1
 8001546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69fa      	ldr	r2, [r7, #28]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8150 	bne.w	8001802 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	4a97      	ldr	r2, [pc, #604]	@ (80017c4 <HAL_GPIO_Init+0x294>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d05e      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800156c:	4a95      	ldr	r2, [pc, #596]	@ (80017c4 <HAL_GPIO_Init+0x294>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d875      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001572:	4a95      	ldr	r2, [pc, #596]	@ (80017c8 <HAL_GPIO_Init+0x298>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d058      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001578:	4a93      	ldr	r2, [pc, #588]	@ (80017c8 <HAL_GPIO_Init+0x298>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d86f      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800157e:	4a93      	ldr	r2, [pc, #588]	@ (80017cc <HAL_GPIO_Init+0x29c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d052      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001584:	4a91      	ldr	r2, [pc, #580]	@ (80017cc <HAL_GPIO_Init+0x29c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d869      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 800158a:	4a91      	ldr	r2, [pc, #580]	@ (80017d0 <HAL_GPIO_Init+0x2a0>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d04c      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 8001590:	4a8f      	ldr	r2, [pc, #572]	@ (80017d0 <HAL_GPIO_Init+0x2a0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d863      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 8001596:	4a8f      	ldr	r2, [pc, #572]	@ (80017d4 <HAL_GPIO_Init+0x2a4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d046      	beq.n	800162a <HAL_GPIO_Init+0xfa>
 800159c:	4a8d      	ldr	r2, [pc, #564]	@ (80017d4 <HAL_GPIO_Init+0x2a4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d85d      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d82a      	bhi.n	80015fc <HAL_GPIO_Init+0xcc>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d859      	bhi.n	800165e <HAL_GPIO_Init+0x12e>
 80015aa:	a201      	add	r2, pc, #4	@ (adr r2, 80015b0 <HAL_GPIO_Init+0x80>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	08001605 	.word	0x08001605
 80015b8:	08001617 	.word	0x08001617
 80015bc:	08001659 	.word	0x08001659
 80015c0:	0800165f 	.word	0x0800165f
 80015c4:	0800165f 	.word	0x0800165f
 80015c8:	0800165f 	.word	0x0800165f
 80015cc:	0800165f 	.word	0x0800165f
 80015d0:	0800165f 	.word	0x0800165f
 80015d4:	0800165f 	.word	0x0800165f
 80015d8:	0800165f 	.word	0x0800165f
 80015dc:	0800165f 	.word	0x0800165f
 80015e0:	0800165f 	.word	0x0800165f
 80015e4:	0800165f 	.word	0x0800165f
 80015e8:	0800165f 	.word	0x0800165f
 80015ec:	0800165f 	.word	0x0800165f
 80015f0:	0800165f 	.word	0x0800165f
 80015f4:	0800160d 	.word	0x0800160d
 80015f8:	08001621 	.word	0x08001621
 80015fc:	4a76      	ldr	r2, [pc, #472]	@ (80017d8 <HAL_GPIO_Init+0x2a8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001602:	e02c      	b.n	800165e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e029      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	3304      	adds	r3, #4
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e024      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	3308      	adds	r3, #8
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e01f      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	330c      	adds	r3, #12
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e01a      	b.n	8001660 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001632:	2304      	movs	r3, #4
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e013      	b.n	8001660 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d105      	bne.n	800164c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001640:	2308      	movs	r3, #8
 8001642:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	611a      	str	r2, [r3, #16]
          break;
 800164a:	e009      	b.n	8001660 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	615a      	str	r2, [r3, #20]
          break;
 8001656:	e003      	b.n	8001660 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
          break;
 800165c:	e000      	b.n	8001660 <HAL_GPIO_Init+0x130>
          break;
 800165e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2bff      	cmp	r3, #255	@ 0xff
 8001664:	d801      	bhi.n	800166a <HAL_GPIO_Init+0x13a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	e001      	b.n	800166e <HAL_GPIO_Init+0x13e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3304      	adds	r3, #4
 800166e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	2bff      	cmp	r3, #255	@ 0xff
 8001674:	d802      	bhi.n	800167c <HAL_GPIO_Init+0x14c>
 8001676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	e002      	b.n	8001682 <HAL_GPIO_Init+0x152>
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	3b08      	subs	r3, #8
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	210f      	movs	r1, #15
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	6a39      	ldr	r1, [r7, #32]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	431a      	orrs	r2, r3
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80a9 	beq.w	8001802 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b0:	4b4a      	ldr	r3, [pc, #296]	@ (80017dc <HAL_GPIO_Init+0x2ac>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a49      	ldr	r2, [pc, #292]	@ (80017dc <HAL_GPIO_Init+0x2ac>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b47      	ldr	r3, [pc, #284]	@ (80017dc <HAL_GPIO_Init+0x2ac>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016c8:	4a45      	ldr	r2, [pc, #276]	@ (80017e0 <HAL_GPIO_Init+0x2b0>)
 80016ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	220f      	movs	r2, #15
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a3d      	ldr	r2, [pc, #244]	@ (80017e4 <HAL_GPIO_Init+0x2b4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00d      	beq.n	8001710 <HAL_GPIO_Init+0x1e0>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a3c      	ldr	r2, [pc, #240]	@ (80017e8 <HAL_GPIO_Init+0x2b8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d007      	beq.n	800170c <HAL_GPIO_Init+0x1dc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a3b      	ldr	r2, [pc, #236]	@ (80017ec <HAL_GPIO_Init+0x2bc>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d101      	bne.n	8001708 <HAL_GPIO_Init+0x1d8>
 8001704:	2302      	movs	r3, #2
 8001706:	e004      	b.n	8001712 <HAL_GPIO_Init+0x1e2>
 8001708:	2303      	movs	r3, #3
 800170a:	e002      	b.n	8001712 <HAL_GPIO_Init+0x1e2>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_GPIO_Init+0x1e2>
 8001710:	2300      	movs	r3, #0
 8001712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001714:	f002 0203 	and.w	r2, r2, #3
 8001718:	0092      	lsls	r2, r2, #2
 800171a:	4093      	lsls	r3, r2
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001722:	492f      	ldr	r1, [pc, #188]	@ (80017e0 <HAL_GPIO_Init+0x2b0>)
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	3302      	adds	r3, #2
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173c:	4b2c      	ldr	r3, [pc, #176]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	492b      	ldr	r1, [pc, #172]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174a:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	4927      	ldr	r1, [pc, #156]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 8001754:	4013      	ands	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001764:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4921      	ldr	r1, [pc, #132]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001772:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	491d      	ldr	r1, [pc, #116]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 800177c:	4013      	ands	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800178c:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4917      	ldr	r1, [pc, #92]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4913      	ldr	r1, [pc, #76]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01f      	beq.n	80017f4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	490d      	ldr	r1, [pc, #52]	@ (80017f0 <HAL_GPIO_Init+0x2c0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	600b      	str	r3, [r1, #0]
 80017c0:	e01f      	b.n	8001802 <HAL_GPIO_Init+0x2d2>
 80017c2:	bf00      	nop
 80017c4:	10320000 	.word	0x10320000
 80017c8:	10310000 	.word	0x10310000
 80017cc:	10220000 	.word	0x10220000
 80017d0:	10210000 	.word	0x10210000
 80017d4:	10120000 	.word	0x10120000
 80017d8:	10110000 	.word	0x10110000
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40010000 	.word	0x40010000
 80017e4:	40010800 	.word	0x40010800
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_GPIO_Init+0x2f4>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	4909      	ldr	r1, [pc, #36]	@ (8001824 <HAL_GPIO_Init+0x2f4>)
 80017fe:	4013      	ands	r3, r2
 8001800:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	3301      	adds	r3, #1
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	fa22 f303 	lsr.w	r3, r2, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	f47f ae96 	bne.w	8001544 <HAL_GPIO_Init+0x14>
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	372c      	adds	r7, #44	@ 0x2c
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40010400 	.word	0x40010400

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	611a      	str	r2, [r3, #16]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43d9      	mvns	r1, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	400b      	ands	r3, r1
 800187a:	431a      	orrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
	...

0800188c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e272      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 8087 	beq.w	80019ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018ac:	4b92      	ldr	r3, [pc, #584]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 030c 	and.w	r3, r3, #12
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d00c      	beq.n	80018d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b8:	4b8f      	ldr	r3, [pc, #572]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d112      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
 80018c4:	4b8c      	ldr	r3, [pc, #560]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d0:	d10b      	bne.n	80018ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d2:	4b89      	ldr	r3, [pc, #548]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06c      	beq.n	80019b8 <HAL_RCC_OscConfig+0x12c>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d168      	bne.n	80019b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e24c      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x76>
 80018f4:	4b80      	ldr	r3, [pc, #512]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a7f      	ldr	r2, [pc, #508]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e02e      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0x98>
 800190a:	4b7b      	ldr	r3, [pc, #492]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a7a      	ldr	r2, [pc, #488]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b78      	ldr	r3, [pc, #480]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a77      	ldr	r2, [pc, #476]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e01d      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0xbc>
 800192e:	4b72      	ldr	r3, [pc, #456]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a71      	ldr	r2, [pc, #452]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b6f      	ldr	r3, [pc, #444]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a6e      	ldr	r2, [pc, #440]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e00b      	b.n	8001960 <HAL_RCC_OscConfig+0xd4>
 8001948:	4b6b      	ldr	r3, [pc, #428]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6a      	ldr	r2, [pc, #424]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800194e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	4b68      	ldr	r3, [pc, #416]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a67      	ldr	r2, [pc, #412]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800195e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fcca 	bl	8001300 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fcc6 	bl	8001300 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	@ 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e200      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b5d      	ldr	r3, [pc, #372]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0xe4>
 800198e:	e014      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fcb6 	bl	8001300 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fcb2 	bl	8001300 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e1ec      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	4b53      	ldr	r3, [pc, #332]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x10c>
 80019b6:	e000      	b.n	80019ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d063      	beq.n	8001a8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019c6:	4b4c      	ldr	r3, [pc, #304]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00b      	beq.n	80019ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d2:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d11c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
 80019de:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d116      	bne.n	8001a18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ea:	4b43      	ldr	r3, [pc, #268]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e1c0      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4939      	ldr	r1, [pc, #228]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	e03a      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d020      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a20:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fc6b 	bl	8001300 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fc67 	bl	8001300 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1a1      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4927      	ldr	r1, [pc, #156]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]
 8001a60:	e015      	b.n	8001a8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <HAL_RCC_OscConfig+0x270>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fc4a 	bl	8001300 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a70:	f7ff fc46 	bl	8001300 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e180      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	4b1d      	ldr	r3, [pc, #116]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d03a      	beq.n	8001b10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d019      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa2:	4b17      	ldr	r3, [pc, #92]	@ (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fc2a 	bl	8001300 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc26 	bl	8001300 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e160      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f000 fa9c 	bl	800200c <RCC_Delay>
 8001ad4:	e01c      	b.n	8001b10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fc10 	bl	8001300 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae2:	e00f      	b.n	8001b04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fc0c 	bl	8001300 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d908      	bls.n	8001b04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e146      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	42420000 	.word	0x42420000
 8001b00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	4b92      	ldr	r3, [pc, #584]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1e9      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 80a6 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b8b      	ldr	r3, [pc, #556]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10d      	bne.n	8001b4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b88      	ldr	r3, [pc, #544]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a87      	ldr	r2, [pc, #540]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	61d3      	str	r3, [r2, #28]
 8001b3a:	4b85      	ldr	r3, [pc, #532]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b46:	2301      	movs	r3, #1
 8001b48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b82      	ldr	r3, [pc, #520]	@ (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d118      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b56:	4b7f      	ldr	r3, [pc, #508]	@ (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fbcd 	bl	8001300 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6a:	f7ff fbc9 	bl	8001300 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b64      	cmp	r3, #100	@ 0x64
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e103      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	4b75      	ldr	r3, [pc, #468]	@ (8001d54 <HAL_RCC_OscConfig+0x4c8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d0f0      	beq.n	8001b6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x312>
 8001b90:	4b6f      	ldr	r3, [pc, #444]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a6e      	ldr	r2, [pc, #440]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e02d      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x334>
 8001ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a69      	ldr	r2, [pc, #420]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b67      	ldr	r3, [pc, #412]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a66      	ldr	r2, [pc, #408]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f023 0304 	bic.w	r3, r3, #4
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x356>
 8001bc8:	4b61      	ldr	r3, [pc, #388]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4a60      	ldr	r2, [pc, #384]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6213      	str	r3, [r2, #32]
 8001bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x36e>
 8001be2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6213      	str	r3, [r2, #32]
 8001bee:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a57      	ldr	r2, [pc, #348]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb7d 	bl	8001300 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff fb79 	bl	8001300 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0b1      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b4b      	ldr	r3, [pc, #300]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x37e>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff fb67 	bl	8001300 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff fb63 	bl	8001300 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e09b      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a3b      	ldr	r2, [pc, #236]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8087 	beq.w	8001d82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c74:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d061      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d146      	bne.n	8001d16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b33      	ldr	r3, [pc, #204]	@ (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fb37 	bl	8001300 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff fb33 	bl	8001300 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e06d      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cbe:	4b24      	ldr	r3, [pc, #144]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4921      	ldr	r1, [pc, #132]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a19      	ldr	r1, [r3, #32]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	491b      	ldr	r1, [pc, #108]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cee:	f7ff fb07 	bl	8001300 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff fb03 	bl	8001300 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e03d      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x46a>
 8001d14:	e035      	b.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_RCC_OscConfig+0x4cc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff faf0 	bl	8001300 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff faec 	bl	8001300 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e026      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x498>
 8001d42:	e01e      	b.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e019      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <HAL_RCC_OscConfig+0x500>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d106      	bne.n	8001d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000

08001d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0d0      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b6a      	ldr	r3, [pc, #424]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b67      	ldr	r3, [pc, #412]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4965      	ldr	r1, [pc, #404]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b63      	ldr	r3, [pc, #396]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b8      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b59      	ldr	r3, [pc, #356]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b53      	ldr	r3, [pc, #332]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a52      	ldr	r2, [pc, #328]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b50      	ldr	r3, [pc, #320]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	494d      	ldr	r1, [pc, #308]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d040      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e073      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06b      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b39      	ldr	r3, [pc, #228]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4936      	ldr	r1, [pc, #216]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7ff fa3e 	bl	8001300 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7ff fa3a 	bl	8001300 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e053      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b27      	ldr	r3, [pc, #156]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d210      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4922      	ldr	r1, [pc, #136]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e032      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4916      	ldr	r1, [pc, #88]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490e      	ldr	r1, [pc, #56]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1e:	f000 f821 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	490a      	ldr	r1, [pc, #40]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	5ccb      	ldrb	r3, [r1, r3]
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <HAL_RCC_ClockConfig+0x1cc>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_RCC_ClockConfig+0x1d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff f99c 	bl	800127c <HAL_InitTick>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08002878 	.word	0x08002878
 8001f5c:	20000024 	.word	0x20000024
 8001f60:	2000002c 	.word	0x2000002c

08001f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d002      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x30>
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d003      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x36>
 8001f92:	e027      	b.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f94:	4b19      	ldr	r3, [pc, #100]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	e027      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	0c9b      	lsrs	r3, r3, #18
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	4a17      	ldr	r2, [pc, #92]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fa4:	5cd3      	ldrb	r3, [r2, r3]
 8001fa6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d010      	beq.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	0c5b      	lsrs	r3, r3, #17
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	4a11      	ldr	r2, [pc, #68]	@ (8002004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fbe:	5cd3      	ldrb	r3, [r2, r3]
 8001fc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fc6:	fb03 f202 	mul.w	r2, r3, r2
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e004      	b.n	8001fde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fd8:	fb02 f303 	mul.w	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	613b      	str	r3, [r7, #16]
      break;
 8001fe2:	e002      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fe6:	613b      	str	r3, [r7, #16]
      break;
 8001fe8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fea:	693b      	ldr	r3, [r7, #16]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	371c      	adds	r7, #28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	007a1200 	.word	0x007a1200
 8002000:	08002888 	.word	0x08002888
 8002004:	08002898 	.word	0x08002898
 8002008:	003d0900 	.word	0x003d0900

0800200c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <RCC_Delay+0x34>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a0a      	ldr	r2, [pc, #40]	@ (8002044 <RCC_Delay+0x38>)
 800201a:	fba2 2303 	umull	r2, r3, r2, r3
 800201e:	0a5b      	lsrs	r3, r3, #9
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002028:	bf00      	nop
  }
  while (Delay --);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	60fa      	str	r2, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f9      	bne.n	8002028 <RCC_Delay+0x1c>
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	20000024 	.word	0x20000024
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e041      	b.n	80020de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff f81a 	bl	80010a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3304      	adds	r3, #4
 8002084:	4619      	mov	r1, r3
 8002086:	4610      	mov	r0, r2
 8002088:	f000 fa56 	bl	8002538 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
	...

080020e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d001      	beq.n	8002100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e035      	b.n	800216c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68da      	ldr	r2, [r3, #12]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a16      	ldr	r2, [pc, #88]	@ (8002178 <HAL_TIM_Base_Start_IT+0x90>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_TIM_Base_Start_IT+0x4e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800212a:	d004      	beq.n	8002136 <HAL_TIM_Base_Start_IT+0x4e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a12      	ldr	r2, [pc, #72]	@ (800217c <HAL_TIM_Base_Start_IT+0x94>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d111      	bne.n	800215a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2b06      	cmp	r3, #6
 8002146:	d010      	beq.n	800216a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002158:	e007      	b.n	800216a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0201 	orr.w	r2, r2, #1
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40012c00 	.word	0x40012c00
 800217c:	40000400 	.word	0x40000400

08002180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d020      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01b      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0202 	mvn.w	r2, #2
 80021b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f998 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 80021d0:	e005      	b.n	80021de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f98b 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f99a 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d020      	beq.n	8002230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01b      	beq.n	8002230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0204 	mvn.w	r2, #4
 8002200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2202      	movs	r2, #2
 8002206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f972 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 800221c:	e005      	b.n	800222a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 f965 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f974 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d020      	beq.n	800227c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f003 0308 	and.w	r3, r3, #8
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01b      	beq.n	800227c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f06f 0208 	mvn.w	r2, #8
 800224c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2204      	movs	r2, #4
 8002252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f94c 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 8002268:	e005      	b.n	8002276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f93f 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f94e 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d020      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0310 	and.w	r3, r3, #16
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01b      	beq.n	80022c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0210 	mvn.w	r2, #16
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2208      	movs	r2, #8
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 f926 	bl	8002500 <HAL_TIM_IC_CaptureCallback>
 80022b4:	e005      	b.n	80022c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f919 	bl	80024ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f928 	bl	8002512 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d007      	beq.n	80022ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0201 	mvn.w	r2, #1
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7fe fe9c 	bl	8001024 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 fa6f 	bl	80027ee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00c      	beq.n	8002334 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800232c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f8f8 	bl	8002524 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00c      	beq.n	8002358 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	2b00      	cmp	r3, #0
 8002346:	d007      	beq.n	8002358 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0220 	mvn.w	r2, #32
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 fa42 	bl	80027dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_TIM_ConfigClockSource+0x1c>
 8002378:	2302      	movs	r3, #2
 800237a:	e0b4      	b.n	80024e6 <HAL_TIM_ConfigClockSource+0x186>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800239a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023b4:	d03e      	beq.n	8002434 <HAL_TIM_ConfigClockSource+0xd4>
 80023b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023ba:	f200 8087 	bhi.w	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023c2:	f000 8086 	beq.w	80024d2 <HAL_TIM_ConfigClockSource+0x172>
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ca:	d87f      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b70      	cmp	r3, #112	@ 0x70
 80023ce:	d01a      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0xa6>
 80023d0:	2b70      	cmp	r3, #112	@ 0x70
 80023d2:	d87b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b60      	cmp	r3, #96	@ 0x60
 80023d6:	d050      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x11a>
 80023d8:	2b60      	cmp	r3, #96	@ 0x60
 80023da:	d877      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b50      	cmp	r3, #80	@ 0x50
 80023de:	d03c      	beq.n	800245a <HAL_TIM_ConfigClockSource+0xfa>
 80023e0:	2b50      	cmp	r3, #80	@ 0x50
 80023e2:	d873      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b40      	cmp	r3, #64	@ 0x40
 80023e6:	d058      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x13a>
 80023e8:	2b40      	cmp	r3, #64	@ 0x40
 80023ea:	d86f      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b30      	cmp	r3, #48	@ 0x30
 80023ee:	d064      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 80023f0:	2b30      	cmp	r3, #48	@ 0x30
 80023f2:	d86b      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d060      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b20      	cmp	r3, #32
 80023fa:	d867      	bhi.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d05c      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 8002400:	2b10      	cmp	r3, #16
 8002402:	d05a      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	e062      	b.n	80024cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002416:	f000 f96a 	bl	80026ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002428:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	609a      	str	r2, [r3, #8]
      break;
 8002432:	e04f      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002444:	f000 f953 	bl	80026ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002456:	609a      	str	r2, [r3, #8]
      break;
 8002458:	e03c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002466:	461a      	mov	r2, r3
 8002468:	f000 f8ca 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2150      	movs	r1, #80	@ 0x50
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f921 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 8002478:	e02c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002486:	461a      	mov	r2, r3
 8002488:	f000 f8e8 	bl	800265c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2160      	movs	r1, #96	@ 0x60
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f911 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 8002498:	e01c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	461a      	mov	r2, r3
 80024a8:	f000 f8aa 	bl	8002600 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2140      	movs	r1, #64	@ 0x40
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f901 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80024b8:	e00c      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4619      	mov	r1, r3
 80024c4:	4610      	mov	r0, r2
 80024c6:	f000 f8f8 	bl	80026ba <TIM_ITRx_SetConfig>
      break;
 80024ca:	e003      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e000      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr
	...

08002538 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a2b      	ldr	r2, [pc, #172]	@ (80025f8 <TIM_Base_SetConfig+0xc0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d007      	beq.n	8002560 <TIM_Base_SetConfig+0x28>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002556:	d003      	beq.n	8002560 <TIM_Base_SetConfig+0x28>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a28      	ldr	r2, [pc, #160]	@ (80025fc <TIM_Base_SetConfig+0xc4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d108      	bne.n	8002572 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <TIM_Base_SetConfig+0xc0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <TIM_Base_SetConfig+0x52>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002580:	d003      	beq.n	800258a <TIM_Base_SetConfig+0x52>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a1d      	ldr	r2, [pc, #116]	@ (80025fc <TIM_Base_SetConfig+0xc4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d108      	bne.n	800259c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a0d      	ldr	r2, [pc, #52]	@ (80025f8 <TIM_Base_SetConfig+0xc0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d103      	bne.n	80025d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f023 0201 	bic.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	611a      	str	r2, [r3, #16]
  }
}
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40000400 	.word	0x40000400

08002600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	f023 0201 	bic.w	r2, r3, #1
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800262a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f023 030a 	bic.w	r3, r3, #10
 800263c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	621a      	str	r2, [r3, #32]
}
 8002652:	bf00      	nop
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	f023 0210 	bic.w	r2, r3, #16
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	031b      	lsls	r3, r3, #12
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	621a      	str	r2, [r3, #32]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f043 0307 	orr.w	r3, r3, #7
 80026dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002708:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	021a      	lsls	r2, r3, #8
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	431a      	orrs	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	609a      	str	r2, [r3, #8]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002740:	2302      	movs	r3, #2
 8002742:	e041      	b.n	80027c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800276a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a14      	ldr	r2, [pc, #80]	@ (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d009      	beq.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002790:	d004      	beq.n	800279c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d10c      	bne.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68ba      	ldr	r2, [r7, #8]
 80027b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40012c00 	.word	0x40012c00
 80027d8:	40000400 	.word	0x40000400

080027dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <memset>:
 8002800:	4603      	mov	r3, r0
 8002802:	4402      	add	r2, r0
 8002804:	4293      	cmp	r3, r2
 8002806:	d100      	bne.n	800280a <memset+0xa>
 8002808:	4770      	bx	lr
 800280a:	f803 1b01 	strb.w	r1, [r3], #1
 800280e:	e7f9      	b.n	8002804 <memset+0x4>

08002810 <__libc_init_array>:
 8002810:	b570      	push	{r4, r5, r6, lr}
 8002812:	2600      	movs	r6, #0
 8002814:	4d0c      	ldr	r5, [pc, #48]	@ (8002848 <__libc_init_array+0x38>)
 8002816:	4c0d      	ldr	r4, [pc, #52]	@ (800284c <__libc_init_array+0x3c>)
 8002818:	1b64      	subs	r4, r4, r5
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	42a6      	cmp	r6, r4
 800281e:	d109      	bne.n	8002834 <__libc_init_array+0x24>
 8002820:	f000 f81a 	bl	8002858 <_init>
 8002824:	2600      	movs	r6, #0
 8002826:	4d0a      	ldr	r5, [pc, #40]	@ (8002850 <__libc_init_array+0x40>)
 8002828:	4c0a      	ldr	r4, [pc, #40]	@ (8002854 <__libc_init_array+0x44>)
 800282a:	1b64      	subs	r4, r4, r5
 800282c:	10a4      	asrs	r4, r4, #2
 800282e:	42a6      	cmp	r6, r4
 8002830:	d105      	bne.n	800283e <__libc_init_array+0x2e>
 8002832:	bd70      	pop	{r4, r5, r6, pc}
 8002834:	f855 3b04 	ldr.w	r3, [r5], #4
 8002838:	4798      	blx	r3
 800283a:	3601      	adds	r6, #1
 800283c:	e7ee      	b.n	800281c <__libc_init_array+0xc>
 800283e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002842:	4798      	blx	r3
 8002844:	3601      	adds	r6, #1
 8002846:	e7f2      	b.n	800282e <__libc_init_array+0x1e>
 8002848:	0800289c 	.word	0x0800289c
 800284c:	0800289c 	.word	0x0800289c
 8002850:	0800289c 	.word	0x0800289c
 8002854:	080028a0 	.word	0x080028a0

08002858 <_init>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	bf00      	nop
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr

08002864 <_fini>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	bf00      	nop
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr
